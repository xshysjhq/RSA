import random
import tkinter as tk
from tkinter import messagebox
import base64




#判断质数
def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5)+1):
        if num % i == 0:
            return False
    return True
def generate_prime():
    prime = 0
    while not is_prime(prime):
        prime = random.randint(101, 10000)
    return prime



#最大公因数
def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)
#模反元素
def mod_inverse(a, m):

    r0, r1 = m, a
    x0, x1 = 0, 1
    while r1 != 0:
        q = r0 // r1
        r0, r1 = r1, r0 - q * r1
        x0, x1 = x1, x0 - q * x1
    return x0 % m


#生成公钥e,n和私钥d，n
def generate_keypair(p, q):
    if not (is_prime(p) and is_prime(q)):
        messagebox.showerror("RSA加密解密","数字必须为质数")
        exit()
    elif p == q:
        messagebox.showerror("RSA加密解密","p和q不能相等")
        exit()
    n = p * q
    phi = (p-1) * (q-1)
    e = 65537
    g = gcd(e, phi)
    while g != 1:
        e = random.randrange(1, phi)
        g = gcd(e, phi)

    d = mod_inverse(e, (p - 1) * (q - 1))

    return (e, n), (d, n)


# RSA加密
def encrypt(plain_text, public_key):
    e, n = public_key
    list = []
    for char in plain_text:
        m = ord(char)
        cipher_text = pow(m, e, n)
        list.append(cipher_text)
    return ",".join('%s' %i for i in list)

# RSA解密
def decrypt(cipher_text, private_key):
    d, n = private_key
    plain_text=''
    cipher_text_list = cipher_text.split(',')
    for namelist in cipher_text_list:
        cipher_text_i = int(namelist)
        m = chr(pow(cipher_text_i, d, n))
        plain_text += m
    return plain_text


def generate_prime_btn_clicked():
    p=generate_prime()
    q=generate_prime()
    while p == q:
        q = generate_prime()
    p_text.delete("1.0", "end")
    p_text.insert("end", f"{p}")
    q_text.delete("1.0", "end")
    q_text.insert("end", f"{q}")

#加密按钮
def encrypt_btn_clicked():
    p = int(p_text.get("1.0", "end-1c"))
    q = int(q_text.get("1.0", "end-1c"))
    public_key, _ = generate_keypair(p, q)
    plain_text = str(plain_text_entry.get())
    if len(plain_text) ==0:
        messagebox.showerror("RSA加密解密", "未输入明文")

    cipher_text = encrypt(plain_text,public_key)
# base64加密
    cipher_text_code = cipher_text.encode('utf-8')
    cipher_text_end=base64.b64encode(cipher_text_code)
    cipher_text_end_1=str(cipher_text_end,'utf-8')
#文本框输出
    text.delete("1.0","end")
    text.insert("end", f"{cipher_text_end_1}")


def decrypt_btn_clicked():
    p = int(p_text.get("1.0", "end-1c"))
    q = int(q_text.get("1.0", "end-1c"))
    _, private_key = generate_keypair(p, q)
    cipher_text = cipher_text_entry.get()
    if len(cipher_text) ==0:
        messagebox.showerror("RSA加密解密", "未输入密文")

    try:
# base64解密
        cipher_text_code = base64.b64decode(cipher_text)
        cipher_text_end = cipher_text_code.decode('utf-8')
        plain_text = decrypt(cipher_text_end, private_key)
# 文本框输出
        text.delete("1.0","end")
        text.insert("end", f"{plain_text}")

    except Exception:
        messagebox.showerror("错误", "无法解密，可能是由于使用了无效的密文或密钥")



if __name__ == '__main__':
# 选择两个质数p和q
    window = tk.Tk()
    window.title("RSA加密解密")
    window.geometry("600x450+700+300")
# 创建输入框和标签
    p_label = tk.Label(window, text="请点“生成”随机生成质数p\n和质数q:")
    p_label.grid(row=0, column=0)
    p_text =tk.Text(window, height=1, width=20, wrap="word", state="disabled")
    p_text.configure(state="normal")
    p_text.grid(row=0, column=1)
    q_text = tk.Text(window, height=1, width=20, wrap="word", state="disabled")
    q_text.configure(state="normal")
    q_text.grid(row=1, column=1)

    plain_text_label = tk.Label(window, text="明文:")
    plain_text_label.grid(row=2, column=0)
    plain_text_entry = tk.Entry(window)
    plain_text_entry.grid(row=2, column=1)

    cipher_text_label = tk.Label(window, text="密文:")
    cipher_text_label.grid(row=3, column=0)
    cipher_text_entry = tk.Entry(window)
    cipher_text_entry.grid(row=3, column=1)

    text_label = tk.Label(window, text="RSA加密或解密结果:")
    text_label.grid(row=10, column=1)
    text = tk.Text(window, height=10, width=30, wrap="word", state="disabled")
    text.grid(row=11, column=1)
    text.configure(state="normal")
# 创建按钮
    generate_prime_btn=tk.Button(window, text="生成",command=generate_prime_btn_clicked)
    encrypt_btn = tk.Button(window, text="加密",command=encrypt_btn_clicked)
    decrypt_btn = tk.Button(window, text="解密",command=decrypt_btn_clicked)
    generate_prime_btn.grid(row=0, column=2)
    encrypt_btn.grid(row=5, column=0)
    decrypt_btn.grid(row=5, column=2)

    window.mainloop()
